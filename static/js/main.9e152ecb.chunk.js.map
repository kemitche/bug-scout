{"version":3,"sources":["bugs/table.tsx","data/bugs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BugTable","bug","key","name","price","location","bugList","this","props","bugs","map","renderBug","Table","React","Component","Availability","months","hours","month","hour","includes","Bug","available","isActive","parseBugs","data","bugData","push","NorthernBugs","northern","southern","PriceCompare","a","b","App","now","Date","currentMonth","getMonth","currentHour","getHours","sortedBugs","filter","item","console","log","sort","sortAndFilter","className","href","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"01qBAiCeA,E,wKAvBDC,GACN,OACI,wBAAIC,IAAKD,EAAIE,MACT,4BAAKF,EAAIE,MACT,4BAAKF,EAAIG,OACT,4BAAKH,EAAII,a,+BAKX,IAAD,OACCC,EAAUC,KAAKC,MAAMC,KAAKC,KAAI,SAACT,GAAD,OAAc,EAAKU,UAAUV,MAEjE,OACI,kBAACW,EAAA,EAAD,KACI,+BACKN,Q,GAjBEO,IAAMC,W,uBCNvBC,E,WACF,WACWC,EACAC,GACR,yBAFQD,SAET,KADSC,Q,qDAGFC,EAAeC,GACpB,QAAIZ,KAAKS,SAAWT,KAAKS,OAAOI,SAASF,OAGrCX,KAAKU,QAAUV,KAAKU,MAAMG,SAASD,Q,KAOzCE,E,WACF,WACWlB,EACAC,EACAC,EACAiB,GACR,yBAJQnB,OAIT,KAHSC,QAGT,KAFSC,WAET,KADSiB,Y,qDAGFJ,EAAeC,GACpB,QAAIZ,KAAKe,WACEf,KAAKe,UAAUC,SAASL,EAAOC,O,KAelD,SAASK,EAAUC,GACf,IADgD,EAC5ChB,EAAO,GADqC,cAE5BgB,GAF4B,IAEhD,2BAA0B,CAAC,IAAlBC,EAAiB,QAClBA,GACAjB,EAAKkB,KAAK,IAAIN,EACVK,EAAQvB,KACRuB,EAAQtB,MACRsB,EAAQrB,SACR,IAAIU,EAAaW,EAAQV,OAAQU,EAAQT,UARL,8BAYhD,OAAOR,EAGX,IAAMmB,EAAeJ,EAAUK,GACVL,EAAUM,GAE/B,SAASC,EAAaC,EAAQC,GAC1B,OAAID,EAAE5B,OAAS6B,EAAE7B,MACN6B,EAAE7B,MAAQ4B,EAAE5B,MAEnB4B,EAAE5B,OACM,EAER6B,EAAE7B,MACK,EAEJ,EAGIiB,ICtCAa,E,4KA/BGzB,GACV,IAAI0B,EAAM,IAAIC,KACVC,EAAeF,EAAIG,WAAa,EAChCC,EAAcJ,EAAIK,WAClBC,EAAahC,EAAKiC,QAAO,SAASC,GAOlC,OANIA,EAAKvC,OACLwC,QAAQC,IAAI,aAAeF,EAAKxC,KAAO,qBAEtCwC,EAAKpB,SAASc,EAAcE,IAC7BK,QAAQC,IAAI,aAAeF,EAAKxC,KAAO,0BAA4BkC,EAAe,MAAQE,GAEtFI,EAAKvC,OAASuC,EAAKpB,SAASc,EAAcE,MAGtD,OADAE,EAAWK,KAAKf,GACTU,I,+BAIP,IAAMhC,EAAOF,KAAKwC,cAAcnB,GAChC,OACI,yBAAKoB,UAAU,OACX,kBAAC,EAAD,CAAUvC,KAAMA,IAChB,wDAC0B,uBAAGwC,KAAK,8DAAR,0BAD1B,2BAEqB,uBAAGA,KAAK,4DAAR,YAFrB,kB,GAvBEpC,IAAMC,WCMJoC,QACW,cAA7BC,OAAO9C,SAAS+C,UAEe,UAA7BD,OAAO9C,SAAS+C,UAEhBD,OAAO9C,SAAS+C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.9e152ecb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Table } from 'reactstrap';\r\n\r\nimport Bug from '../data/bugs';\r\n\r\ntype BugTableProps = {\r\n    bugs: Bug[],\r\n}\r\n\r\nclass BugTable extends React.Component<BugTableProps, {}> {\r\n    renderBug(bug: Bug) {\r\n        return (\r\n            <tr key={bug.name}>\r\n                <td>{bug.name}</td>\r\n                <td>{bug.price}</td>\r\n                <td>{bug.location}</td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const bugList = this.props.bugs.map((bug: Bug) => this.renderBug(bug))\r\n\r\n        return (\r\n            <Table>\r\n                <tbody>\r\n                    {bugList}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BugTable;","import northern from './northern_hemisphere.json';\r\nimport southern from './southern_hemisphere.json';\r\n\r\nclass Availability {\r\n    constructor(\r\n        public months: number[] | null,\r\n        public hours: number[] | null,\r\n    ) {}\r\n\r\n    isActive(month: number, hour: number): boolean {\r\n        if (this.months && !this.months.includes(month)) {\r\n            return false;\r\n        }\r\n        if (this.hours && !this.hours.includes(hour)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nclass Bug {\r\n    constructor(\r\n        public name: string,\r\n        public price: number | null,\r\n        public location: string | null,\r\n        public available: Availability,\r\n    ) {}\r\n\r\n    isActive(month: number, hour: number): boolean {\r\n        if (this.available) {\r\n            return this.available.isActive(month, hour);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\ninterface BugJson {\r\n    name: string;\r\n    image_url: string | null;\r\n    price: number | null;\r\n    location: string | null;\r\n    hours: number[] | null;\r\n    months: number[];\r\n}\r\n\r\nfunction parseBugs(data: (BugJson | null)[]): Bug[] {\r\n    let bugs = [];\r\n    for (let bugData of data) {\r\n        if (bugData) {\r\n            bugs.push(new Bug(\r\n                bugData.name,\r\n                bugData.price,\r\n                bugData.location,\r\n                new Availability(bugData.months, bugData.hours)\r\n            ))\r\n        }\r\n    }\r\n    return bugs;\r\n}\r\n\r\nconst NorthernBugs = parseBugs(northern);\r\nconst SouthernBugs = parseBugs(southern);\r\n\r\nfunction PriceCompare(a: Bug, b: Bug): number {\r\n    if (a.price && b.price) {\r\n        return b.price - a.price;\r\n    }\r\n    if (a.price) {\r\n        return -1;\r\n    }\r\n    if (b.price) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport default Bug;\r\n\r\nexport { NorthernBugs, SouthernBugs, PriceCompare };","import React from 'react';\nimport './App.css';\n\nimport BugTable from './bugs/table';\nimport Bug, { NorthernBugs, PriceCompare } from './data/bugs';\n\nclass App extends React.Component {\n    sortAndFilter(bugs: Bug[]) {\n        let now = new Date();\n        let currentMonth = now.getMonth() + 1;\n        let currentHour = now.getHours();\n        let sortedBugs = bugs.filter(function(item) {\n            if(!item.price) {\n                console.log(\"Filtering \" + item.name + \" because no price\");\n            }\n            if (!item.isActive(currentMonth, currentHour)) {\n                console.log(\"Filtering \" + item.name + \" because not active at \" + currentMonth + \" / \" + currentHour);\n            }\n            return (item.price && item.isActive(currentMonth, currentHour));\n        })\n        sortedBugs.sort(PriceCompare)\n        return sortedBugs;\n    }\n\n    render() {\n        const bugs = this.sortAndFilter(NorthernBugs);\n        return (\n            <div className=\"App\">\n                <BugTable bugs={bugs}/>\n                <small>\n                    Data sourced from the <a href=\"https://animalcrossing.fandom.com/wiki/Bugs_(New_Horizons)\">Animal Crossing Fandom</a> under\n                    the terms of the <a href=\"https://creativecommons.org/licenses/by-sa/3.0/legalcode\">CC-BY-SA</a> license.\n                </small>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}